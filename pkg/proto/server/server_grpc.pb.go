// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/proto/server/server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WikipediaPathfindingClient is the client API for WikipediaPathfinding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WikipediaPathfindingClient interface {
	// Put request into queue. You can get result by calling GetResult with returned ID.
	QueueFindPath(ctx context.Context, in *FindPathRequest, opts ...grpc.CallOption) (*FindPathResultId, error)
	// If request is not completed yet then return gRPC status NOT FOUND
	GetResult(ctx context.Context, in *FindPathResultId, opts ...grpc.CallOption) (*FindPathResult, error)
}

type wikipediaPathfindingClient struct {
	cc grpc.ClientConnInterface
}

func NewWikipediaPathfindingClient(cc grpc.ClientConnInterface) WikipediaPathfindingClient {
	return &wikipediaPathfindingClient{cc}
}

func (c *wikipediaPathfindingClient) QueueFindPath(ctx context.Context, in *FindPathRequest, opts ...grpc.CallOption) (*FindPathResultId, error) {
	out := new(FindPathResultId)
	err := c.cc.Invoke(ctx, "/server.WikipediaPathfinding/QueueFindPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikipediaPathfindingClient) GetResult(ctx context.Context, in *FindPathResultId, opts ...grpc.CallOption) (*FindPathResult, error) {
	out := new(FindPathResult)
	err := c.cc.Invoke(ctx, "/server.WikipediaPathfinding/GetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WikipediaPathfindingServer is the server API for WikipediaPathfinding service.
// All implementations must embed UnimplementedWikipediaPathfindingServer
// for forward compatibility
type WikipediaPathfindingServer interface {
	// Put request into queue. You can get result by calling GetResult with returned ID.
	QueueFindPath(context.Context, *FindPathRequest) (*FindPathResultId, error)
	// If request is not completed yet then return gRPC status NOT FOUND
	GetResult(context.Context, *FindPathResultId) (*FindPathResult, error)
	mustEmbedUnimplementedWikipediaPathfindingServer()
}

// UnimplementedWikipediaPathfindingServer must be embedded to have forward compatible implementations.
type UnimplementedWikipediaPathfindingServer struct {
}

func (UnimplementedWikipediaPathfindingServer) QueueFindPath(context.Context, *FindPathRequest) (*FindPathResultId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueFindPath not implemented")
}
func (UnimplementedWikipediaPathfindingServer) GetResult(context.Context, *FindPathResultId) (*FindPathResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedWikipediaPathfindingServer) mustEmbedUnimplementedWikipediaPathfindingServer() {}

// UnsafeWikipediaPathfindingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WikipediaPathfindingServer will
// result in compilation errors.
type UnsafeWikipediaPathfindingServer interface {
	mustEmbedUnimplementedWikipediaPathfindingServer()
}

func RegisterWikipediaPathfindingServer(s grpc.ServiceRegistrar, srv WikipediaPathfindingServer) {
	s.RegisterService(&WikipediaPathfinding_ServiceDesc, srv)
}

func _WikipediaPathfinding_QueueFindPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikipediaPathfindingServer).QueueFindPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.WikipediaPathfinding/QueueFindPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikipediaPathfindingServer).QueueFindPath(ctx, req.(*FindPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikipediaPathfinding_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPathResultId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikipediaPathfindingServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.WikipediaPathfinding/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikipediaPathfindingServer).GetResult(ctx, req.(*FindPathResultId))
	}
	return interceptor(ctx, in, info, handler)
}

// WikipediaPathfinding_ServiceDesc is the grpc.ServiceDesc for WikipediaPathfinding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WikipediaPathfinding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.WikipediaPathfinding",
	HandlerType: (*WikipediaPathfindingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueFindPath",
			Handler:    _WikipediaPathfinding_QueueFindPath_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _WikipediaPathfinding_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/server/server.proto",
}
